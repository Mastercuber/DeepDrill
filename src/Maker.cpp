// -----------------------------------------------------------------------------
// This file is part of DeepDrill
//
// A Mandelbrot generator based on perturbation and series approximation
//
// Copyright (C) Dirk W. Hoffmann. www.dirkwhoffmann.de
// Licensed under the GNU General Public License v3
//
// See https://www.gnu.org for license information
// -----------------------------------------------------------------------------

#include "config.h"
#include "Maker.h"
#include "Logger.h"
#include "Options.h"

namespace dd {

Maker::Maker(map<string,string> &k, const Options &o) : keys(k), opt(o)
{
    project = stripSuffix(stripPath(opt.locFileIn));
    pathLoc = appendPath(opt.targetDir, project + ".loc");
    pathPrf = appendPath(opt.targetDir, project + ".prf");
    pathMakefile = appendPath(opt.targetDir, "Makefile");

    log::cout << "pathLoc = " << pathLoc << log::endl;
    log::cout << "pathPrf = " << pathPrf << log::endl;
    log::cout << "pathMakefile = " << pathMakefile << log::endl;
}

void
Maker::generate()
{
    generateLocationFile();
    generateProfile();
    generateMakefile();
}

void
Maker::generateLocationFile()
{
    log::cout << "generateLocationFile()" << log::endl;
    
    std::ofstream os(pathLoc);

    // Write header
    writeHeader(os);
    
    // Write location section
    os << "[location]" << std::endl;
    os << "real = " << keys["location.real"] << std::endl;
    os << "imag = " << keys["location.imag"] << std::endl;
    os << "zoom = " << keys["location.zoom"] << std::endl;
    os << "depth = " << keys["location.depth"] << std::endl;
    os << std::endl;
}

void
Maker::generateProfile()
{
    log::cout << "generateProfile()" << log::endl;
    
    std::ofstream os(pathPrf);

    for (auto &it : keys) {
        std::cout << "Key: " << it.first << " = " << it.second << std::endl;
    }
    // Write header
    writeHeader(os);
    
    // Write location section
    os << "[image]" << std::endl;
    os << "width = " << keys["image.width"] << std::endl;
    os << "height = " << keys["image.height"] << std::endl;
    os << std::endl;

    // Write perturbation section
    os << "[perturbation]" << std::endl;
    os << "tolerance = " << keys["perturbation.tolerance"] << std::endl;
    os << "maxRounds = " << keys["perturbation.maxrounds"] << std::endl;
    os << "accuracy = " << keys["perturbation.accuracy"] << std::endl;
    os << std::endl;

    // Write series approximation section
    os << "[approximation]" << std::endl;
    os << "coefficients = " << keys["approximation.coefficients"] << std::endl;
    os << "tolerance = " << keys["approximation.tolerance"] << std::endl;
    os << std::endl;

    // Write palette section
    os << "[palette]" << std::endl;
    os << "values = " << keys["palette.values"] << std::endl;
    os << std::endl;
}

void
Maker::generateMakefile()
{
    log::cout << "generateMakefile()" << log::endl;

    std::ofstream os(pathMakefile);

    // Write header
    writeHeader(os);
    os << std::endl;

    // Write definitions
    os << "DEEPDRILL = " << keys["exec"] << std::endl;
    os << std::endl;

    // Declare phony targets
    os << ".PHONY: all clean" << std::endl;
    os << std::endl;

    // Write targets
    os << "all: " << project << ".tiff" << std::endl;
    os << std::endl;

    os << project << ".tiff: " << project << ".map" << std::endl;
    os << "\t";
    os << "$(DEEPDRILL) -v ";
    os << " -p " << project << ".prf";
    os << " -o " << project << ".tiff";
    os << " " << project << ".map " << std::endl;
    os << std::endl;

    os << project << ".map: " << project << ".loc" << std::endl;
    os << "\t";
    os << "$(DEEPDRILL) -v ";
    os << " -p " << project << ".prf";
    os << " -o " << project << ".map";
    os << " " << project << ".loc " << std::endl;
    os << std::endl;

    os << "clean:" << std::endl;
    os << "\t";
    os << "rm *.map *.tiff" << std::endl;
    os << std::endl;
}

void
Maker::writeHeader(std::ofstream &os)
{
    auto now = std::chrono::system_clock::now();
    auto time = std::chrono::system_clock::to_time_t(now);
    
    os << "# Generated by DeepDrill " << VER_MAJOR << "." << VER_MINOR;
    os << " on " << std::ctime(&time);
}

}
